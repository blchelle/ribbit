// Generators
generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// Datasources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Schema
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  email     String   @unique
  username  String   @unique
  password  String

  // Relational Fields
  content   Content[]
  votes     Vote[]

  // 'user' is a reserved table name in PostgreSQL
  @@map("usr")
}

model Community {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique

  // Relational Fields
  content   Content[]

  @@map("community")
}

model Content {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  body        String

  authorId    Int
  communityId Int

  // Relational Fields
  author      User      @relation(fields: [authorId], references: [id])
  replies     Comment[] @relation("ReplyContent")
  post        Post?
  comment     Comment?  @relation("ParentContent")
  community   Community @relation(fields: [communityId], references: [id])
  votes       Vote[]

  @@map("content")
}

model Post {
  id      Int     @id
  title   String

  content Content @relation(fields: [id], references: [id])

  @@map("post")
}

model Comment {
  id        Int     @id

  // Relational Field
  content   Content @relation("ParentContent", fields: [id], references: [id])

  replyTo   Content @relation("ReplyContent", fields: [replyToId], references: [id])
  replyToId Int

  @@map("comment")
}

model Vote {
  contentId  Int
  voteNumber Int

  sign       Boolean // False = -1, True = +1

  userId     Int

  // Relational Fields
  user       User    @relation(fields: [userId], references: [id])
  content    Content @relation(fields: [contentId], references: [id])

  @@id([contentId, voteNumber])
  @@map("vote")
}

// Relational Tables
model UserOnCommunity {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  community   Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([userId, communityId])
  @@map("user_community")
}
